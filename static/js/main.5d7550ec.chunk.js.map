{"version":3,"sources":["util/Config.js","component/Static/NavBarTop.js","page/Dashboard.js","util/Constant.js","page/DbList.js","page/TableList.js","page/ColumnList.js","page/IndexList.js","page/NotFound.js","AppSDA.js","index.js"],"names":["processEnv","process","fixProcessEnv","console","log","debugEnabled","infoEnabled","consoleLogPrefixMsg","prefix","msg","contextRoot","config","fixContextPath","url","urlOut","HOME","HOME_INDEX_HTML","TABLELIST","COLUMNLIST","INDEXLIST","consoleLogMsg","consoleLog","NavBarTop","props","context","logout","_canMount","state","currentUser","this","curUser","curUserId","id","Navbar","collapseOnSelect","expand","bg","variant","fixed","Brand","href","Toggle","aria-controls","Collapse","Nav","className","to","NavDropdown","title","Item","Divider","Form","inline","FormControl","type","placeholder","Button","Component","Dashboard","appVersion","style","backgroundColor","paddingLeft","paddingRight","paddingTop","paddingBottom","children","float","DbList","setServiceBackEndExists","existAlterDbPass","existDbOpCommand","existDropDb","existNewDb","renderList","listDb","listDbCount","length","thead","styleBtnExtra","marginLeft","tbody","map","rowDbName","idx","styleTdDb","color","listBtn","push","key","bsSize","onClick","tableListPage","alterDbPassPage","serviceBE_AlterDbPass","dbOpCommandModal","serviceBE_DbOpCommand","dropDbModal","serviceBE_DropDb","btnNewDb","newDbModal","marginRight","serviceBE_NewDb","Table","striped","hover","bordered","dbNameSelected","sqlUpdate","TableList","editTablePage","tableName","columnListPage","history","indexListPage","newTablePage","dropTableModal","inputColumnFilter","placeHolder","widthX","onChange","event","onChangeListTable","target","value","tableSearch","setState","inputFilterTable","fixStateListTableFiltered","list","listTable","listCount","inputFilterTableValue","inputFilterTableFind","String","toLowerCase","inputFilterTableFindLen","listFiltered","i","search","listTableFiltered","listTableFilteredCount","rowTableName","existDropTable","serviceBE_DropTable","btnNewTable","existNewTable","serviceBE_NewTable","dbNameActive","showModal","ColumnList","columnId","onChangeList","selectColumnFilter","valueSearch","inputFilterColumnValues","strValueContains","valueColumn","indexSearch","transitToTableListPage","listColumnFiltered","fixStateListColumnFiltered","listColumnFilteredCount","styleOrder","textAlign","rowColumn","colNotNull","columnNotNull","columnIndex","columnName","columnTypeNameSize","tableNameActive","listColumn","inputFilterSearchValues","countSearchFull","inputFilterColumnValue","row","filterRow","bsStyle","IndexList","responseListIndex","count","listIndex","getStateListIndex","listIndexCount","rowIndex","indexUnique","indexName","indexColumns","NotFound","App","exact","path","component","position","appMain","rootElem","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.5d7550ec.chunk.js","sourcesContent":["import config from \"./config.json\";\r\n\r\n//---------------------------------\r\nconst processEnv = fixProcessEnv();\r\n\r\n//export\r\nconst ENV_development = \"development\";\r\n//const ENV_test = \"test\";\r\nconst ENV_production = \"production\";\r\n\r\nfunction fixProcessEnv() {\r\n    let processEnv = process.env.NODE_ENV;\r\n    if (!processEnv)\r\n        processEnv = ENV_development;\r\n    return processEnv;\r\n}\r\n\r\n\r\n//---------------------------------\r\n//logLEVELApp:0(NONE); 1(DEBUG+INFO); 2(INFO only)\r\nconst logLEVELApp = 1;\r\nconsole.log(\"logLEVELApp:\" + logLEVELApp + \", processEnv:\" + processEnv);\r\n\r\n/*\r\nexport const isDebugEnabled = () => {\r\n    return logLEVELApp >= 1;\r\n};\r\n*/\r\n\r\nexport const debugEnabled = (logLEVELApp === 1) && (processEnv === ENV_development);\r\nif (debugEnabled)\r\n    console.log(\"debugEnabled:\" + debugEnabled);\r\n\r\nexport const infoEnabled = (logLEVELApp <= 2 && logLEVELApp >= 1) && (processEnv !== ENV_production)\r\nif (infoEnabled)\r\n    console.log(\"infoEnabled:\" + infoEnabled);\r\n\r\nexport const consoleLogPrefixMsg = (prefix) => (msg) => console.log(prefix + \".\" + msg);\r\n\r\n//TODO?\r\n//export const warnEnabled = (logLEVELApp <= 3 && logLEVELApp >= 1);\r\n//console.log(\"warnEnabled:\" + warnEnabled);\r\n\r\n//export const errorEnabled = (logLEVELApp <= 4 && logLEVELApp >= 1);\r\n//console.log(\"errorEnabled:\" + errorEnabled);\r\n//---------------------------------------------\r\n\r\n\r\n/*PREV:\r\nexport const envApp = Object.assign({}, config[processEnv]);\r\nif (debugEnabled)\r\n    console.log(\"! envApp.url: \" + envApp.url);\r\n*/\r\n\r\nlet envApp = null;\r\nexport function fixEnv() {\r\n    if (envApp != null)\r\n        return envApp;\r\n\r\n    envApp = Object.assign({}, config[processEnv]);\r\n    if (debugEnabled)\r\n        console.log(\"!! envApp.url: \" + envApp.url);\r\n\r\n    return envApp;\r\n}\r\n\r\n\r\n//---------------------------------\r\nexport const contextRoot = config.contextRoot;\r\nif (infoEnabled)\r\n  console.log(\"contextRoot: \" + contextRoot);\r\n\r\n//For caring WAR type routing main page:\r\nexport function fixContextPath(url) {\r\n  let urlOut = url;\r\n  if (contextRoot)\r\n      urlOut = contextRoot + urlOut;\r\n\r\n  if (debugEnabled)\r\n    console.log(\"fixContextPath.urlOut: [\" + urlOut + \"]\");\r\n\r\n  return urlOut;\r\n}\r\n\r\n\r\n//---------------------------------\r\n//PAGES\r\nexport const HOME = fixContextPath(\"/\");\r\nexport const HOME_INDEX_HTML = fixContextPath(\"/index.html\");\r\n\r\nexport const LOGIN = fixContextPath(\"/login\");\r\n\r\nexport const TABLELIST = fixContextPath(\"/tableList\");\r\n\r\nexport const EDITTABLE = fixContextPath(\"/editTable\");\r\n\r\nexport const COLUMNLIST = fixContextPath(\"/columnList\");\r\n\r\nexport const INDEXLIST = fixContextPath(\"/indexList\");\r\n\r\nexport const NEWTABLE = fixContextPath(\"/newTable\");\r\n\r\n//?\r\n//export const IMAGES = fixContextPath(\"images\");\r\n","import React, { Component } from \"react\";\r\n\r\n//import { Link } from \"react-router-dom\";\r\n\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\r\n\r\n//import { NavLink } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Form, FormControl } from \"react-bootstrap\";\r\n\r\n//import { setLinksNEXTForBreadcrumbOnCACHE } from \"../../action/CachedDataAction\";\r\n\r\n//import { fetchCurrentUser } from \"../../action/UserAction\";\r\n\r\n//import * as toast from \"./Toaster\";\r\n\r\n//import toastErrorFix from \"../../util/ToastError\";\r\n\r\nimport { HOME, HOME_INDEX_HTML, TABLELIST,\r\n        COLUMNLIST, INDEXLIST } from \"../../util/Config\";\r\n\r\nimport { debugEnabled, consoleLogPrefixMsg } from \"../../util/Config\";\r\n\r\nconst consoleLogMsg = consoleLogPrefixMsg(\"! NavBarTop\");\r\nconst consoleLog = (msg) => consoleLogMsg(msg);\r\n\r\nclass NavBarTop extends Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this._canMount = true; //TODO? Necessity!\r\n        if (debugEnabled)\r\n            consoleLog(\"constructor.props:\" + (props ? \"+EXIST\" : \"!ABSENT\") + \", context:\" + (context ? \"+EXIST\" : \"!ABSENT\"));\r\n\r\n        this.state = {\r\n            currentUser: null\r\n            //linksNEXT: null\r\n        }\r\n\r\n        //? this.context = context;\r\n        //+ this.transitToPageBinded = this.transitToPage.bind(this);\r\n    }\r\n\r\n\r\n    //TODO? Executed at first!\r\n    componentDidMount() {\r\n        if (debugEnabled)\r\n            consoleLog(\"componentDidMount._canMount:\" + this._canMount);\r\n\r\n        //TODO?\r\n        if (this._canMount) {\r\n            //fetchCurrentUser(this.responseCurrentUser);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._canMount = false;\r\n        if (debugEnabled)\r\n            consoleLog(\"componentWillUnmount_canMount:\" + this._canMount);\r\n    }\r\n\r\n    logout = () => {\r\n        if (debugEnabled)\r\n            consoleLog(\"logout\");\r\n\r\n        //closeUserOnSession(this.responseLogoutSuccess, this.responseLogoutError);\r\n    }\r\n\r\n/*\r\n    responseCurrentUser = (curUser) => {\r\n        if (debugEnabled)\r\n            consoleLog(\"responseCurrentUser._canMount:\" + this._canMount + \", \" + (this._canMount ? \"+PROCESS\" : \"!SKIP\"));\r\n\r\n        if (this._canMount) {\r\n            //TODO? Useless!\r\n            //const linksNEXT = getLinksNEXTForBreadcrumbOnCACHE();\r\n            //this.setState({ currentUser: curUser, linksNEXT: linksNEXT });\r\n            this.setState({ currentUser: curUser });\r\n        }\r\n    }\r\n*/\r\n\r\n\r\n    render() {\r\n        const curUser = this.state.currentUser;\r\n        const curUserId = (curUser ? curUser.id : null);\r\n\r\n        if (debugEnabled)\r\n            consoleLog(\"render.curUserId:\" + curUserId + \"_canMount:\" + this._canMount); // + \", winLoc:\" + winLoc\r\n\r\n        /*TODO? prb!\r\n            <Nav.Link to={TABLELIST}>TableList</Nav.Link>\r\n            ..\r\n             <NavDropdown.Item href=\"/indexList\">IndexList</NavDropdown.Item>\r\n        */\r\n\r\n        return (<div>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" fixed=\"top\">\r\n                <Navbar.Brand href={HOME}>MAIN</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Link to={HOME} className=\"btn btn-info\">HOME</Link>\r\n                        <Link to={TABLELIST} className=\"btn btn-primary\">TABLELIST</Link>\r\n                        <Link to={COLUMNLIST} className=\"btn btn-info\">COLUMNLIST</Link>\r\n                        <Link to={INDEXLIST} className=\"btn btn-primary\">INDEXLIST</Link>\r\n\r\n                        <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\r\n                            <NavDropdown.Item><Link to={TABLELIST}>TableList</Link></NavDropdown.Item>\r\n                            <NavDropdown.Item><Link to={COLUMNLIST}>ColumnList</Link></NavDropdown.Item>\r\n                            <NavDropdown.Item><Link to={INDEXLIST}>IndexList</Link></NavDropdown.Item>\r\n                            <NavDropdown.Divider/>\r\n                            <NavDropdown.Item><Link to={HOME_INDEX_HTML}>HomeIndex</Link></NavDropdown.Item>\r\n                        </NavDropdown>\r\n                    </Nav>\r\n                    <Form inline>\r\n                        <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\"/>\r\n                        <Button variant=\"outline-info\">Search</Button>\r\n                    </Form>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            <br/>\r\n        </div>);\r\n    }//render\r\n}\r\n\r\nexport default NavBarTop;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { FE_APP_VERSION } from \"../util/Constant\";\r\n\r\n//z? Note: Necessary for menu and drop downs!\r\n\r\n//new, cancel?\r\n//import \"bootstrap-sass/assets/javascripts/bootstrap\";\r\n\r\n//z\r\n//import \"react-image-gallery/styles/scss/image-gallery.scss\";\r\n\r\n//new, cancel?\r\n//import \"../assets/scss/main.scss\";\r\n\r\nimport NavBarTop from \"../component/Static/NavBarTop\";\r\n\r\n//import { fetchAppVersion } from \"../action/AuthAction\";\r\n\r\nimport { debugEnabled, consoleLogPrefixMsg } from \"../util/Config\";\r\n\r\nconst consoleLogMsg = consoleLogPrefixMsg(\"! Dashboard\");\r\nconst consoleLog = (msg) => consoleLogMsg(msg);\r\n\r\nclass Dashboard extends Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this._canMount = true;\r\n        if (debugEnabled)\r\n            consoleLog(\"constructor.props:\" + (props ? \"+EXIST\" : \"!ABSENT\") + \", context:\" + (context ? \"+EXIST\" : \"!ABSENT\"));\r\n\r\n        this.state = {\r\n            //appVersion: null\r\n            appVersion: 1.0\r\n        }\r\n\r\n        //? this.context = context;\r\n    }\r\n\r\n    /*TODO?\r\n    state = {\r\n        collapsed: false,\r\n    };\r\n\r\n    toggle = () => {\r\n        const collapsedLast = this.state.collapsed;\r\n        if (debugEnabled)\r\n            consoleLog(\"toggle.collapsedPrev:\" + collapsedLast);\r\n\r\n        this.setState({\r\n            collapsed: !collapsedLast,\r\n        });\r\n    }\r\n    */\r\n\r\n\r\n    componentDidMount() {\r\n        if (debugEnabled)\r\n            consoleLog(\"componentDidMount._canMount:\" + this._canMount);\r\n\r\n        //TODO?\r\n        //if (this._canMount)\r\n        //    fetchAppVersion(this.responseAppVersion);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._canMount = false;\r\n        if (debugEnabled)\r\n            consoleLog(\"componentWillUnmount_canMount:\" + this._canMount);\r\n    }\r\n\r\n    /*\r\n    responseAppVersion = (appVer) => {\r\n        if (debugEnabled)\r\n            consoleLog(\"responseAppVersion_canMount:\" + this._canMount + \", \" + (this._canMount ? \"+PROCESS\" : \"!SKIP\"));\r\n    \r\n        if (this._canMount)\r\n            this.setState({ appVersion: appVer });\r\n    }\r\n    */\r\n\r\n\r\n    render() {\r\n        if (debugEnabled)\r\n            consoleLog(\"render_canMount:\" + this._canMount);\r\n\r\n        return (\r\n            <div>\r\n                <NavBarTop props={this.props}/>\r\n\r\n                <div style={{ backgroundColor:\"white\", paddingLeft:40, paddingRight:40, paddingTop:50, paddingBottom:100 }}>\r\n                    {this.props.children}\r\n                </div>\r\n\r\n                <nav className=\"navbar navbar-default navbar-fixed-bottom\">\r\n                    <div className=\"container\" style={{ float: 'left' }}>\r\n                        <p className=\"navbar-text\">[{this.state.appVersion}; {FE_APP_VERSION}]</p>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dashboard;\r\n","export const FE_APP_VERSION = \"FEv1.01\";\r\n\r\n//export const STATUS = \"STATUS\";\r\n\r\n//export const YES_NO = \"YES_NO\";\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Table, Button } from \"react-bootstrap\";\r\n\r\nimport { debugEnabled, consoleLogPrefixMsg } from \"../util/Config\";\r\n\r\nconst consoleLogMsg = consoleLogPrefixMsg(\"DbList\");\r\nconst consoleLog = (msg) => consoleLogMsg(msg);\r\n\r\nclass DbList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    if (debugEnabled)\r\n      consoleLog(\"constructor\");\r\n\r\n    this.serviceBE_AlterDbPass = \"AlterDbPass\";\r\n    this.serviceBE_DbOpCommand = \"DbOpCommand\";\r\n    this.serviceBE_DropDb = \"DropDb\";\r\n    this.serviceBE_NewDb = \"NewDb\";\r\n\r\n    this.dbNameSelected = null; //independent from state!\r\n\r\n    this.existAlterDbPass = true; //isServiceBackEndExistOnCACHE(this.serviceBE_AlterDbPass);\r\n    this.existDbOpCommand = true; //isServiceBackEndExistOnCACHE(this.serviceBE_DbOpCommand);\r\n    this.existDropDb = true; //isServiceBackEndExistOnCACHE(this.serviceBE_DropDb);\r\n    this.existNewDb = true; //isServiceBackEndExistOnCACHE(this.serviceBE_NewDb);\r\n\r\n    this.state = {\r\n      listDb: null,\r\n      sqlUpdate: null\r\n\r\n      //currentPage: 0\r\n      //columns: this.fixColumnList()\r\n    };//state\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    if (debugEnabled)\r\n      consoleLog(\"componentDidMount\");\r\n\r\n    //+test:\r\n    //const listDb = [\"Agenda\", \"Garage\", \"SaleTest\"];\r\n    //this.setState({ listDb: listDb });\r\n\r\n    //setServiceBackEndListOnCACHE and continue!\r\n    // /?const thenCallback = (listServiceBackEnd) => { fetchDatabaseList(this.responseListDb); }\r\n    //const thenCallback = () => { fetchDatabaseList(this.responseListDb); }\r\n  }\r\n\r\n  setServiceBackEndExists = () => {\r\n    this.existAlterDbPass = true; //isServiceBackEndExistOnCACHE(this.serviceBE_AlterDbPass);\r\n    this.existDbOpCommand = true; //isServiceBackEndExistOnCACHE(this.serviceBE_DbOpCommand);\r\n    this.existDropDb = true; //isServiceBackEndExistOnCACHE(this.serviceBE_DropDb);\r\n    this.existNewDb = true; //isServiceBackEndExistOnCACHE(this.serviceBE_NewDb);\r\n  }\r\n\r\n\r\n  renderList = () => {\r\n    const listDb = [\"Db1\", \"Db2\", \"Db3\", \"Db4\", \"Db5\"];\r\n    if (debugEnabled) {\r\n      const listDbCount = listDb.length;\r\n      consoleLog(\"renderList.listDbCount:\" + listDbCount);\r\n    }\r\n\r\n    const thead = (<thead>\r\n      <tr>\r\n        <th>Database</th>\r\n        <th>[Operations]</th>\r\n      </tr>\r\n     </thead>);\r\n\r\n    const dbNameActive = null; //getDbNameActiveOnCACHE();\r\n\r\n    const styleBtnExtra = { marginLeft:5 };\r\n\r\n    const tbody = (<tbody>\r\n      {listDb.map((rowDbName, idx) => {\r\n        const styleDbColor = (dbNameActive === rowDbName ? \"red\" : \"blue\");\r\n        const styleTdDb = { color: styleDbColor };\r\n\r\n        const listBtn = [];\r\n        listBtn.push(<Button key=\"d0\" className=\"btn btn-info\" bsSize=\"xsmall\" onClick={() => this.tableListPage(rowDbName)}>Tables</Button>);\r\n\r\n        if (this.existAlterDbPass) {\r\n          listBtn.push(<Button key=\"d1\" className=\"btn btn-success\" bsSize=\"xsmall\" style={styleBtnExtra} onClick={() => this.alterDbPassPage(rowDbName)}>{this.serviceBE_AlterDbPass}</Button>);\r\n        }\r\n\r\n        if (this.existDbOpCommand) {\r\n          listBtn.push(<Button key=\"d2\" className=\"btn btn-primary\" bsSize=\"xsmall\" style={styleBtnExtra} onClick={() => this.dbOpCommandModal(rowDbName)}>{this.serviceBE_DbOpCommand}</Button>);\r\n        }\r\n\r\n        if (this.existDropDb) {\r\n          listBtn.push(<Button key=\"d3\" className=\"btn btn-danger\" bsSize=\"xsmall\" style={styleBtnExtra} onClick={() => this.dropDbModal(rowDbName)}>{this.serviceBE_DropDb}</Button>);\r\n        }\r\n\r\n        return (\r\n          <tr key={idx}>\r\n            <td style={styleTdDb}>{rowDbName}</td>\r\n            <td>\r\n              {listBtn}\r\n            </td>\r\n          </tr>\r\n        );\r\n      })}\r\n    </tbody>);\r\n\r\n    let btnNewDb = null;\r\n    if (this.existNewDb) {\r\n      btnNewDb = (<Button className=\"btn btn-warning pull-right\"\r\n                        bsSize=\"xsmall\"\r\n                        onClick={this.newDbModal}\r\n                        style={{ marginRight: 20 }}>\r\n                  <span className=\"glyphicon glyphicon-plus\"></span>{this.serviceBE_NewDb}\r\n                </Button>);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          {btnNewDb}\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <Table striped hover bordered>\r\n            {thead}\r\n            {tbody}\r\n          </Table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }//render_List\r\n\r\n\r\n  render() {\r\n    if (debugEnabled)\r\n      consoleLog(\"render\");\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"row text-center\">\r\n          <h2 className=\"page-header pull-left\">Database List</h2>\r\n        </div>\r\n        {this.renderList()}\r\n      </div>\r\n    );\r\n  }//render\r\n}\r\n\r\nexport default DbList;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Table, Button } from \"react-bootstrap\";\r\n\r\n/*\r\nimport { getDbNameActiveOnCACHE,\r\n          getDbTableListActiveOnCACHE,\r\n          updateDbConActiveTableNameOnCACHE,\r\n          setLinksNEXTForBreadcrumbOnCACHE\r\n        } from \"../action/CachedDataAction\";\r\n*/\r\n\r\n//import * as toast from \"../component/Static/Toaster\";\r\n\r\nimport { COLUMNLIST, INDEXLIST } from \"../util/Config\";\r\n\r\nimport { debugEnabled, consoleLogPrefixMsg } from \"../util/Config\";\r\n\r\nconst consoleLogMsg = consoleLogPrefixMsg(\"TableList\");\r\nconst consoleLog = (msg) => consoleLogMsg(msg);\r\n\r\nclass TableList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const dbNameActive = \"Table5\"; //getDbNameActiveOnCACHE();\r\n    if (debugEnabled)\r\n      consoleLog(\"constructor.dbNameActive: \" + dbNameActive);\r\n\r\n    //TODO? inputFilterTable may be TAKEN from CACHE!\r\n\r\n    //this.tableNameSelected = null; //This does not effect the render!\r\n\r\n    this.serviceBE_NewTable = \"NewTable\";\r\n    this.existNewTable = true; //isServiceBackEndExistOnCACHE(this.serviceBE_NewTable);\r\n\r\n    this.serviceBE_DropTable = \"DropTable\";\r\n    this.existDropTable = true; //isServiceBackEndExistOnCACHE(this.serviceBE_DropTable);\r\n\r\n    this.state = {\r\n      dbNameActive: dbNameActive,\r\n      listTable: null,\r\n      //TODO? inputFilterColumnValues: {}!\r\n      inputFilterTable: null, //SingleValueSEARCH!\r\n      showModal: null\r\n      //currentPage: 0\r\n    };\r\n  }//constructor\r\n\r\n\r\n  componentDidMount() {\r\n    const dbNameActive = this.state.dbNameActive;\r\n    if (debugEnabled)\r\n      consoleLog(\"componentDidMount.dbNameActive:\" + dbNameActive);\r\n\r\n    /*\r\n    //Note: Table list comes from ACTIVE DBCon!\r\n    const listTableActive = getDbTableListActiveOnCACHE();\r\n    if (listTableActive == null) {\r\n      toast.error(\"DbName:\" + dbNameActive + \" connection FAILED!\");\r\n      return;\r\n    }\r\n\r\n    this.setState({ listTable: listTableActive });\r\n    */\r\n  }\r\n\r\n\r\n  editTablePage = (tableName) => {\r\n    if (debugEnabled) {\r\n      const msg = \"editTablePage.tableName:\" + tableName;\r\n      consoleLog(msg);\r\n    }\r\n\r\n    /*\r\n    //this.tableNameSelected = tableName;\r\n    updateDbConActiveTableNameOnCACHE(tableName);\r\n\r\n    setLinksNEXTForBreadcrumbOnCACHE(EDITTABLE);\r\n    this.props.history.push(EDITTABLE);\r\n    */\r\n  }\r\n\r\n\r\n  columnListPage = (tableName) => {\r\n    if (debugEnabled) {\r\n      const msg = \"columnListPage.tableName:\" + tableName;\r\n      consoleLog(msg);\r\n    }\r\n\r\n    /*\r\n    //this.tableNameSelected = tableName;\r\n    updateDbConActiveTableNameOnCACHE(tableName);\r\n\r\n    setLinksNEXTForBreadcrumbOnCACHE(COLUMNLIST);\r\n    */\r\n    this.props.history.push(COLUMNLIST);\r\n  }\r\n\r\n  indexListPage = (tableName) => {\r\n    if (debugEnabled) {\r\n      const msg = \"indexListPage.tableName:\" + tableName;\r\n      consoleLog(msg);\r\n    }\r\n\r\n    /*\r\n    //this.tableNameSelected = tableName;\r\n    updateDbConActiveTableNameOnCACHE(tableName);\r\n\r\n    setLinksNEXTForBreadcrumbOnCACHE(INDEXLIST);\r\n    */\r\n    this.props.history.push(INDEXLIST);\r\n  }\r\n\r\n\r\n  newTablePage = () => {\r\n    if (debugEnabled) {\r\n      const msg = \"newTablePage\";\r\n      consoleLog(msg);\r\n    }\r\n\r\n    /*TODO?\r\n    ////this.tableNameSelected = null;\r\n    //updateDbConActiveTableNameOnCACHE(null); //tableName\r\n\r\n    setLinksNEXTForBreadcrumbOnCACHE(NEWTABLE);\r\n    this.props.history.push(NEWTABLE);\r\n    */\r\n  }\r\n\r\n  dropTableModal = (tableName) => {\r\n    if (debugEnabled) {\r\n      const msg = \"dropTableModal.tableName:\" + tableName;\r\n      consoleLog(msg);\r\n    }\r\n\r\n    /*?\r\n    this.tableNameSelected = tableName;\r\n    //This does not effect the render!\r\n\r\n    this.setState({ showModal: \"dropTable\" });\r\n    */\r\n  }\r\n\r\n\r\n\r\n  inputColumnFilter = (placeHolder) => {\r\n    if (debugEnabled)\r\n      consoleLog(\"inputColumnFilter\");\r\n\r\n    return (<input type=\"text\"\r\n        placeholder={placeHolder}\r\n        style={{ widthX: \"90%\" }}\r\n        onChange={(event) => this.onChangeListTable(event.target.value)}/>\r\n      );\r\n  }\r\n\r\n  onChangeListTable = (tableSearch) => {\r\n    if (debugEnabled)\r\n      consoleLog(\"onChangeListTable.tableSearch:\" + tableSearch);\r\n\r\n    this.setState({ inputFilterTable: tableSearch });\r\n  }\r\n\r\n\r\n  fixStateListTableFiltered = () => {\r\n    const list = this.state.listTable;\r\n    const listCount = (list ? list.length : 0);\r\n    if (debugEnabled) {\r\n      consoleLog(\"fixStateListTableFiltered.listTableCount:\" + listCount);\r\n    }\r\n\r\n    if (listCount === 0)\r\n      return []; //EmptyList!\r\n\r\n    const inputFilterTableValue = this.state.inputFilterTable;\r\n    if (debugEnabled)\r\n      consoleLog(\"->inputFilterTableValue:\" + inputFilterTableValue);\r\n\r\n    const inputFilterTableFind = (inputFilterTableValue==null ? null : String(inputFilterTableValue).toLowerCase());\r\n    if (debugEnabled)\r\n      consoleLog(\"->inputFilterTableFind:\" + inputFilterTableFind);\r\n\r\n    const inputFilterTableFindLen = (inputFilterTableFind==null ? 0 : inputFilterTableFind.length);\r\n    if (debugEnabled)\r\n      consoleLog(\"->inputFilterTableFindLen:\" + inputFilterTableFindLen);\r\n\r\n    if (inputFilterTableFindLen === 0)\r\n      return list;\r\n\r\n    const listFiltered = [];\r\n    for(let i = 0; i < listCount; i++) {\r\n        let tableName = list[i];\r\n        let indexSearch = tableName.toLowerCase().search(inputFilterTableFind);\r\n\r\n        if (indexSearch >= 0)\r\n          listFiltered.push(tableName);\r\n    }//for-i\r\n\r\n    return listFiltered;\r\n  }//fix_StateListTable_Filtered\r\n\r\n\r\n  renderList = () => {\r\n    const listTableFiltered = [\"Table1\", \"Table2\", \"Table3\", \"Table4\", \"Table5\", \"Table6\", \"Table7\", \"Table8\", \"Table9\"];\r\n    if (debugEnabled) {\r\n      const listTableFilteredCount = listTableFiltered.length;\r\n      consoleLog(\"renderList.listTableFilteredCount:\" + listTableFilteredCount);\r\n    }\r\n\r\n    const thead = (<thead>\r\n                  <tr>\r\n                    <th>Table {this.inputColumnFilter(\"\")}</th>\r\n                    <th>[Operations]</th>\r\n                  </tr>\r\n                </thead>);\r\n\r\n    const styleBtnExtra = { marginLeft:5 };\r\n\r\n    const tbody = (<tbody>\r\n      {listTableFiltered.map((rowTableName, idx) => {\r\n        const listBtn = [];\r\n        listBtn.push(<Button key=\"t0\" className=\"btn btn-info\" bsSize=\"xsmall\" onClick={() => this.editTablePage(rowTableName)}>EditTable</Button>);\r\n        listBtn.push(<Button key=\"t1\" className=\"btn btn-success\" bsSize=\"xsmall\" style={styleBtnExtra} onClick={() => this.columnListPage(rowTableName)}>Columns</Button>);\r\n        listBtn.push(<Button key=\"t2\" className=\"btn btn-primary\" bsSize=\"xsmall\" style={styleBtnExtra} onClick={() => this.indexListPage(rowTableName)}>Indexes</Button>);\r\n        if (this.existDropTable) {\r\n          listBtn.push(<Button key=\"t3\" className=\"btn btn-danger\" bsSize=\"xsmall\" style={styleBtnExtra} onClick={() => this.dropTableModal(rowTableName)}>{this.serviceBE_DropTable}</Button>);\r\n        }\r\n\r\n        return (\r\n          <tr key={idx}>\r\n            <td>{rowTableName}</td>\r\n            <td>\r\n              {listBtn}\r\n            </td>\r\n          </tr>\r\n        );\r\n      })}\r\n    </tbody>);\r\n\r\n    let btnNewTable = null;\r\n    if (this.existNewTable) {\r\n      btnNewTable = (<Button className=\"btn btn-warning pull-right\"\r\n                        bsSize=\"xsmall\"\r\n                        onClick={this.newTablePage}\r\n                        style={{ marginRight: 20 }}>\r\n                      <span className=\"glyphicon glyphicon-plus\"></span>{this.serviceBE_NewTable}\r\n                    </Button>);\r\n    }\r\n\r\n    return (<div>\r\n              <div className=\"row\">\r\n                <span style={{ marginLeft: 10 }}>Database: <b>{this.state.dbNameActive}</b></span>\r\n                {btnNewTable}\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <Table striped hover bordered>\r\n                  {thead}\r\n                  {tbody}\r\n                </Table>\r\n              </div>\r\n            </div>\r\n          );\r\n  }//render_List\r\n\r\n\r\n  render() {\r\n    if (debugEnabled)\r\n      consoleLog(\"render\");\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"row text-center\">\r\n          <h2 className=\"page-header pull-left\">Table List</h2>\r\n        </div>\r\n        {this.renderList()}\r\n      </div>\r\n    );\r\n  }//render\r\n}\r\n\r\nexport default TableList;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Table, Button } from \"react-bootstrap\";\r\n\r\n/*\r\nimport { fetchColumnList } from \"../action/DbAction\";\r\n\r\nimport { getDbNameActiveOnCACHE,\r\n        getDbConActiveTableNameOnCACHE,\r\n        setLinksNEXTForBreadcrumbOnCACHE\r\n} from \"../action/CachedDataAction\";\r\n*/\r\n\r\nimport { TABLELIST } from \"../util/Config\";\r\nimport { debugEnabled, consoleLogPrefixMsg } from \"../util/Config\";\r\n\r\nconst consoleLogMsg = consoleLogPrefixMsg(\"ColumnList\");\r\nconst consoleLog = (msg) => consoleLogMsg(msg);\r\n\r\nclass ColumnList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const dbNameActive = \"DB1\"; //getDbNameActiveOnCACHE();\r\n    const tableNameActive = \"Table3\"; //getDbConActiveTableNameOnCACHE();\r\n    if (debugEnabled)\r\n      consoleLog(\"constructor.dbNameActive:\" + dbNameActive + \", tableNameActive:\" + tableNameActive);\r\n\r\n    this.state = {\r\n      dbNameActive: dbNameActive,\r\n      tableNameActive: tableNameActive,\r\n      listColumn: null,\r\n      inputFilterColumnValues: {}\r\n      //? currentPage: 0\r\n      //columns: this.fixColumnList()\r\n    }; //state\r\n  }//constructor\r\n\r\n\r\n  componentDidMount() {\r\n    const dbNameActive = this.state.dbNameActive;\r\n    const tableNameActive = this.state.tableNameActive;\r\n    if (debugEnabled) {\r\n      consoleLog(\"componentDidMount.dbNameActive:\" + dbNameActive + \", tableNameActive:\" + tableNameActive);\r\n    }\r\n\r\n    /*\r\n    const dbTableParamsDTO = { dbName: dbNameActive, tableName: tableNameActive };\r\n    fetchColumnList(dbTableParamsDTO, this.responseListColumn);\r\n    */\r\n  }\r\n\r\n  /*\r\n  responseListColumn = (list) => {\r\n    const count = (list ? list.length : 0);\r\n    if (debugEnabled)\r\n        consoleLog(\"responseListColumn.count: \" + count);\r\n\r\n    this.setState({\r\n        listColumn: list\r\n      });\r\n\r\n    //After state update, forces the render!\r\n  }\r\n  */\r\n\r\n  inputColumnFilter = (columnId, placeHolder) => {\r\n    if (debugEnabled)\r\n      consoleLog(\"inputColumnFilter.columnId:\" + columnId);\r\n\r\n    //TODO? ref={columnId}\r\n    return (<input type=\"text\"\r\n        placeholder={placeHolder}\r\n        style={{ widthX: \"90%\" }}\r\n        onChange={(event) => this.onChangeList(columnId, event.target.value)}/>\r\n      );\r\n  }\r\n\r\n  selectColumnFilter = (columnId, placeHolder) => {\r\n    if (debugEnabled)\r\n      consoleLog(\"selectColumnFilter.columnId:\" + columnId);\r\n\r\n    return (<select onChange={(event) => this.onChangeList(columnId, event.target.value)}>\r\n              <option value=\"\">{placeHolder}</option>\r\n              <option value=\"true\">NOT NULL</option>\r\n              <option value=\"false\">NULLABLE</option>\r\n            </select>\r\n      );\r\n  }\r\n\r\n\r\n  onChangeList = (columnId, valueSearch) => {\r\n    if (debugEnabled)\r\n      consoleLog(\"onChangeList.columnId:\" + columnId + \", valueSearch:\" + valueSearch);\r\n\r\n    const inputFilterColumnValues = this.state.inputFilterColumnValues;\r\n    if (inputFilterColumnValues == null)\r\n      return;\r\n\r\n    inputFilterColumnValues[columnId] = valueSearch;\r\n\r\n    //TODO? Need to setState!?\r\n    this.setState({ inputFilterColumnValues: inputFilterColumnValues });\r\n  }\r\n\r\n  /*PREV:\r\n  getStateListColumn() {\r\n    const list = this.state.listColumn;\r\n    if (list)\r\n        return list;\r\n    return []; //EmptyList!\r\n  }\r\n  */\r\n\r\n  //TODO? move into Util!?\r\n  fixStateListColumnFiltered() {\r\n    const list = this.state.listColumn;\r\n    const listCount = (list ? list.length : 0);\r\n    if (debugEnabled) {\r\n      consoleLog(\"fixStateListColumnFiltered.listColumnCount:\" + listCount);\r\n    }\r\n\r\n    if (listCount === 0)\r\n      return []; //EmptyList!\r\n\r\n    const inputFilterColumnValues = this.state.inputFilterColumnValues;\r\n    const inputFilterSearchValues = {};\r\n    let countSearchFull = 0;\r\n    if (inputFilterColumnValues!=null) {\r\n      for(let columnId in inputFilterColumnValues) {\r\n        const inputFilterColumnValue = inputFilterColumnValues[columnId];\r\n        if (debugEnabled)\r\n          consoleLog(\"->columnId:\" + columnId + \", inputFilterColumnValue:\" + inputFilterColumnValue);\r\n\r\n        if (inputFilterColumnValue==null || inputFilterColumnValue===\"\")\r\n          continue;\r\n\r\n        countSearchFull++;\r\n        inputFilterSearchValues[columnId] = inputFilterColumnValue;\r\n      }//for\r\n    }//if\r\n\r\n\r\n    if (debugEnabled)\r\n      consoleLog(\"->countSearchFull:\" + countSearchFull);\r\n\r\n    if (countSearchFull===0)\r\n      return list;\r\n\r\n    const listFiltered = [];\r\n    for(let i = 0; i < listCount; i++) {\r\n        const row = list[i];\r\n\r\n        let filterRow = false;\r\n        for(let columnId in inputFilterSearchValues) {\r\n          const inputFilterColumnValue = inputFilterSearchValues[columnId];\r\n          const status = this.strValueContains(row[columnId], inputFilterColumnValue);\r\n          if (status===false) {\r\n            filterRow = true;\r\n            break;\r\n          }\r\n        }//for: columnId\r\n\r\n        if (filterRow)\r\n          continue;\r\n\r\n        listFiltered.push(row);\r\n    }//for-i\r\n\r\n    return listFiltered;\r\n  }//fix_StateListColumn_Filtered\r\n\r\n  //TODO? move into Util!?\r\n  strValueContains = (valueColumn, valueSearch) => {\r\n    if (debugEnabled)\r\n      consoleLog(\"->>strValueContains.valueColumn:\" + valueColumn + \", valueSearch:\" + valueSearch);\r\n\r\n    //TODO? Checked before!\r\n    if (valueSearch==null || valueSearch===\"\")\r\n      return true; //TODO? CONTAINS!\r\n\r\n    if (valueColumn==null)\r\n      return false; //TODO? NOT CONTAINS!\r\n\r\n    const indexSearch = String(valueColumn).toLowerCase().search(String(valueSearch).toLowerCase());\r\n    if (debugEnabled) {\r\n        consoleLog(\"->>strValueContains.indexSearch:\" + indexSearch);\r\n    }\r\n\r\n    return (indexSearch >= 0); //CONTAINS!\r\n  }//strValue_Contains\r\n\r\n  transitToTableListPage = () => {\r\n    //l? setLinksNEXTForBreadcrumbOnCACHE(TABLELIST);\r\n    this.props.history.push(TABLELIST);\r\n  }\r\n\r\n  renderList = () => {\r\n    const listColumnFiltered = this.fixStateListColumnFiltered();\r\n    if (debugEnabled) {\r\n      const listColumnFilteredCount = listColumnFiltered.length;\r\n      consoleLog(\"renderList.listColumnFilteredCount:\" + listColumnFilteredCount);\r\n    }\r\n\r\n    const styleOrder = { textAlign:\"right\" };\r\n\r\n    const thead = (<thead>\r\n      <tr>\r\n        <th style={styleOrder}>Order</th>\r\n        <th>ColumnName\r\n          <br/>\r\n          {this.inputColumnFilter(\"columnName\", \"Search\")}\r\n        </th>\r\n\r\n        <th>ColumnType\r\n          <br/>\r\n          {this.inputColumnFilter(\"columnTypeNameSize\", \"Search\")}\r\n        </th>\r\n\r\n        <th>Nullable\r\n          <br/>\r\n          {this.selectColumnFilter(\"columnNotNull\", \"Select\")}\r\n        </th>\r\n      </tr>\r\n    </thead>);\r\n\r\n    const tbody = (<tbody>\r\n      {listColumnFiltered.map((rowColumn, idx) => {\r\n        const colNotNull = (rowColumn.columnNotNull ? \"NOT NULL\" : \"+\");\r\n\r\n        return (\r\n          <tr key={idx}>\r\n            <td style={styleOrder}>{rowColumn.columnIndex + 1}.</td>\r\n            <td>{rowColumn.columnName}</td>\r\n            <td>{rowColumn.columnTypeNameSize}</td>\r\n            <td>{colNotNull}</td>\r\n          </tr>\r\n        );\r\n      })}\r\n    </tbody>);\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <span style={{ marginLeft: 10 }}>Database: <b>{this.state.dbNameActive}</b></span>\r\n          <span style={{ marginLeft: 30 }}>Table: <b>{this.state.tableNameActive}</b></span>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <Table striped hover bordered>\r\n            {thead}\r\n            {tbody}\r\n          </Table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }//render_List\r\n\r\n\r\n  render() {\r\n    if (debugEnabled)\r\n      consoleLog(\"render\");\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"row text-center\">\r\n          <h2 className=\"page-header pull-left\">Column List</h2>\r\n        </div>\r\n\r\n        {this.renderList()}\r\n\r\n        <div className=\"row text-center\">\r\n          <Button type=\"button\" bsStyle=\"default\"\r\n              onClick={this.transitToTableListPage}>OK</Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }//render\r\n}\r\n\r\nexport default ColumnList;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Table, Button } from \"react-bootstrap\";\r\n\r\n/*?\r\nimport { fetchIndexList } from \"../action/DbAction\";\r\n\r\nimport { getDbNameActiveOnCACHE,\r\n        getDbConActiveTableNameOnCACHE,\r\n        setLinksNEXTForBreadcrumbOnCACHE\r\n} from \"../action/CachedDataAction\";\r\n*/\r\n\r\nimport { TABLELIST } from \"../util/Config\";\r\nimport { debugEnabled, consoleLogPrefixMsg } from \"../util/Config\";\r\n\r\nconst consoleLogMsg = consoleLogPrefixMsg(\"IndexList\");\r\nconst consoleLog = (msg) => consoleLogMsg(msg);\r\n\r\nclass IndexList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const dbNameActive = \"DB2\"; //getDbNameActiveOnCACHE();\r\n    const tableNameActive = \"Table5\"; //getDbConActiveTableNameOnCACHE();\r\n    if (debugEnabled)\r\n      consoleLog(\"constructor.dbNameActive:\" + dbNameActive + \", tableNameActive:\" + tableNameActive);\r\n\r\n    this.state = {\r\n      dbNameActive: dbNameActive,\r\n      tableNameActive: tableNameActive,\r\n      listIndex: null\r\n    };\r\n  }//constructor\r\n\r\n\r\n  componentDidMount() {\r\n    const dbNameActive = this.state.dbNameActive;\r\n    const tableNameActive = this.state.tableNameActive;\r\n    if (debugEnabled) {\r\n      consoleLog(\"componentDidMount.dbNameActive:\" + dbNameActive + \", tableNameActive:\" + tableNameActive);\r\n    }\r\n\r\n    /*?\r\n    const dbTableParamsDTO = { dbName: dbNameActive, tableName: tableNameActive };\r\n    fetchIndexList(dbTableParamsDTO, this.responseListIndex);\r\n    */\r\n  }\r\n\r\n  responseListIndex = (list) => {\r\n    const count = (list ? list.length : 0);\r\n    if (debugEnabled)\r\n        consoleLog(\"responseListIndex.count: \" + count);\r\n\r\n    this.setState({\r\n        listIndex: list\r\n      });\r\n\r\n    //After state update, forces the render!\r\n  }\r\n\r\n  transitToTableListPage = () => {\r\n    //l? setLinksNEXTForBreadcrumbOnCACHE(TABLELIST);\r\n    this.props.history.push(TABLELIST);\r\n  }\r\n\r\n  getStateListIndex() {\r\n    const list = this.state.listIndex;\r\n    if (list)\r\n        return list;\r\n    return []; //EmptyList!\r\n  }\r\n\r\n\r\n  renderList = () => {\r\n    const listIndex = this.getStateListIndex();\r\n    if (debugEnabled) {\r\n      const listIndexCount = listIndex.length;\r\n      consoleLog(\"renderList.listIndexCount:\" + listIndexCount);\r\n    }\r\n\r\n    const thead = (<thead>\r\n      <tr>\r\n        <th>IndexName</th>\r\n        <th>Unique</th>\r\n        <th>IndexColumns</th>\r\n      </tr>\r\n      </thead>);\r\n\r\n    const tbody = (<tbody>\r\n      {listIndex.map((rowIndex, idx) => {\r\n        const indexUnique = (rowIndex.indexUnique ? \"UNIQUE\" : \"-\");\r\n\r\n    return (\r\n          <tr key={idx}>\r\n            <td>{rowIndex.indexName}</td>\r\n            <td>{indexUnique}</td>\r\n            <td>{rowIndex.indexColumns}</td>\r\n          </tr>\r\n        );\r\n      })}\r\n    </tbody>);\r\n\r\n    return (\r\n        <div>\r\n          <div className=\"row\">\r\n          <span style={{ marginLeft: 10 }}>Database: <b>{this.state.dbNameActive}</b></span>\r\n          <span style={{ marginLeft: 30 }}>Table: <b>{this.state.tableNameActive}</b></span>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n          <Table striped hover bordered>\r\n            {thead}\r\n            {tbody}\r\n          </Table>\r\n          </div>\r\n        </div>\r\n    );\r\n  }//render_List\r\n\r\n\r\n  render() {\r\n    if (debugEnabled)\r\n      consoleLog(\"render\");\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"row text-center\">\r\n          <h2 className=\"page-header pull-left\">Index List</h2>\r\n        </div>\r\n\r\n        {this.renderList()}\r\n\r\n\r\n        <div className=\"row text-center\">\r\n          <Button type=\"button\" bsStyle=\"default\"\r\n              onClick={this.transitToTableListPage}>OK</Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }//render\r\n}\r\n\r\nexport default IndexList;\r\n","import React, {Component} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport { HOME } from \"../util/Config\";\r\n\r\nclass NotFound extends Component {\r\n\r\n    render() {\r\n        return <div className=\"col-md-10\">\r\n            <div className=\"error-template\">\r\n                <h1>Page not found!</h1>\r\n                <h4>Detail: 404 Not Found</h4>\r\n                <div className=\"error-actions\">\r\n                    <Link to={HOME} className=\"btn btn-primary btn-lg\">\r\n                        <span className=\"glyphicon glyphicon-home\"/>\r\n                        &nbsp;Goto Main Page</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default NotFound;\r\n","import React, {Component} from \"react\";\r\n\r\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\r\n//import { Router } from \"react-router-dom\";\r\n//import { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nimport Dashboard from \"./page/Dashboard\";\r\n\r\nimport DbList from \"./page/DbList\";\r\nimport TableList from \"./page/TableList\";\r\nimport ColumnList from \"./page/ColumnList\";\r\nimport IndexList from \"./page/IndexList\";\r\n\r\nimport NotFound from \"./page/NotFound\";\r\n\r\n//NEW:\r\nimport \"./App.css\";\r\n\r\nimport { debugEnabled, consoleLogPrefixMsg } from \"./util/Config\";\r\n\r\nimport { HOME, HOME_INDEX_HTML, TABLELIST,\r\n         COLUMNLIST, INDEXLIST } from \"./util/Config\";\r\n\r\nconst consoleLogMsg = consoleLogPrefixMsg(\"<App>\");\r\nconst consoleLog = (msg) => consoleLogMsg(msg);\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        if (debugEnabled)\r\n            consoleLogMsg(\"App.constructor\");\r\n    }\r\n\r\n    render() {\r\n        if (debugEnabled)\r\n            consoleLog(\"render\");\r\n\r\n        //consoleLog(\">window.location.href:\" + window.location.href);\r\n\r\n        //TODO? <Dashboard>  <Switch>\r\n\r\n        return (\r\n            <HashRouter>\r\n                <div>\r\n                    <Dashboard>\r\n                        <Switch>\r\n                            <Route exact path={HOME} component={DbList}/>\r\n                            <Route path={HOME_INDEX_HTML} component={DbList}/>\r\n\r\n                            <Route path={TABLELIST} component={TableList}/>\r\n                            <Route path={COLUMNLIST} component={ColumnList}/>\r\n                            <Route path={INDEXLIST} component={IndexList}/>\r\n\r\n                            <Route component={NotFound}/>\r\n                        </Switch>\r\n                    </Dashboard>\r\n\r\n                    <ToastContainer position=\"top-right\" className=\"toastify\"/>\r\n                </div>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n//+ import App from \"./App\";\n//+ import App from \"./AppBrowserRouter\";\n//+ import App from \"./AppMISC\";\nimport App from \"./AppSDA\";\n\n// Importing the Bootstrap CSS\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst appMain = <App/>;\nconst rootElem = document.getElementById(\"root\");\n\nReactDOM.render(appMain, rootElem);\n"],"sourceRoot":""}